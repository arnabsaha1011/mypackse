# create table issue

CREATE TABLE ISSUE(
ISSUE_URL VARCHAR (500) NOT NULL,
ISSUE_ID VARCHAR(20) NOT NULL,
ISSUE_NUMBER VARCHAR(100) NOT NULL,
ISSUE_TITLE VARCHAR (1000),
ISSUE_USER_NAME VARCHAR(100),
ISSUE_USER_ID VARCHAR(100),
ISSUE_STATE VARCHAR (10),
ISSUE_ASSIGNEE_NAME VARCHAR (20),
ISSUE_ASSIGNEE_ID VARCHAR (20),
ISSUE_MILESTONE_ID VARCHAR (20),
ISSUE_COMMENTS VARCHAR (10),
ISSUE_CREATE_TIME TIMESTAMP,
ISSUE_UPDATE_TIME TIMESTAMP,
ISSUE_CLOSE_TIME TIMESTAMP,
PRIMARY KEY ( ISSUE_ID )
);

# insert ISSUE
INSERT INTO ISSUE(ISSUE_URL,ISSUE_ID,ISSUE_NUMBER,ISSUE_TITLE,ISSUE_USER_NAME,ISSUE_USER_ID,ISSUE_STATE,ISSUE_ASSIGNEE_NAME,ISSUE_ASSIGNEE_ID,ISSUE_MILESTONE_ID,ISSUE_COMMENTS,ISSUE_CREATE_TIME,ISSUE_UPDATE_TIME,ISSUE_CLOSE_TIME) values (
);

# create table event
CREATE TABLE EVENT(
EVENT_ID VARCHAR(20) NOT NULL,
EVENT_ACTOR VARCHAR(20),
EVENT_ACTOR_ID VARCHAR(50),
EVENT_ACTION VARCHAR(10),
EVENT_CREATE_TIME TIMESTAMP,
EVENT_ISSUE_ID VARCHAR(20),
EVENT_ISSUE_NUMBER VARCHAR(10),
EVENT_LABEL_NAME VARCHAR(10),
EVENT_ASSIGNEE_ID VARCHAR(20),
EVENT_ASSIGNER_ID VARCHAR(20),
EVENT_MILESTONE_TITLE VARCHAR(1000),
PRIMARY KEY (EVENT_ID)
);


# create table milestone
CREATE TABLE MILESTONE(
MILESTONE_ID VARCHAR(20) NOT NULL,
MILESTONE_NUMBER VARCHAR(100),
MILESTONE_TITLE VARCHAR(1000),
MILESTONE_DESC VARCHAR(1000),
MILESTONE_CREATOR VARCHAR(20),
MILESTONE_CREATOR_ID VARCHAR(50),
MILESTONE_OPEN_ISSUES INT,
MILESTONE_CLOSED_ISSUES INT,
MILESTONE_STATE VARCHAR(10),
MILESTONE_CREATION_TIME TIMESTAMP,
MILESTONE_UPDATE_TIME TIMESTAMP,
MILESTONE_DUE_TIME TIMESTAMP,
MILESTONE_CLOSED_TIME TIMESTAMP,
PRIMARY KEY ( MILESTONE_ID )
);

# insert milestone
INSERT INTO MILESTONE(MILESTONE_ID,MILESTONE_NUMBER,MILESTONE_TITLE,MILESTONE_DESC,MILESTONE_CREATOR,MILESTONE_CREATOR_ID,MILESTONE_OPEN_ISSUES,MILESTONE_CLOSED_ISSUES,MILESTONE_STATE,MILESTONE_CREATION_TIME,MILESTONE_UPDATE_TIME,MILESTONE_DUE_TIME,MILESTONE_CLOSED_TIME) values (
);

# create table comment
CREATE TABLE COMMENT(
COMMENT_ISSUE_URL VARCHAR(100),
COMMENT_ID VARCHAR(20) NOT NULL,
COMMENT_USER_NAME VARCHAR(20),
COMMENT_USER_ID VARCHAR(20),
COMMENT_CREATE_TIME TIMESTAMP,
COMMENT_UPDATE_TIME TIMESTAMP,
COMMENT_DESC VARCHAR(1000),
PRIMARY KEY ( COMMENT_ID )
);

# create table user
CREATE TABLE USER(
USER_ID VARCHAR(20) NOT NULL,
USER_NAME VARCHAR(20),
USER_GROUP_NUMBER INT,
PRIMARY KEY ( USER_ID )
);

#insert queries
#comment
INSERT INTO COMMENT(COMMENT_ISSUE_URL,COMMENT_ID,COMMENT_USER_NAME,COMMENT_USER_ID,COMMENT_CREATE_TIME,COMMENT_UPDATE_TIME,COMMENT_DESC) values (
);

# create table commit
CREATE TABLE COMMIT(
COMMIT_ID VARCHAR(100) NOT NULL,
COMMIT_USER_ID VARCHAR(20),
COMMIT_USER_NAME VARCHAR(100),
COMMIT_TIMESTAMP TIMESTAMP,
COMMIT_DESC VARCHAR(1000),
PRIMARY KEY ( COMMIT_ID )
);

#insert queries
#commit
INSERT INTO COMMIT(
COMMIT_ID,
COMMIT_USER_ID,
COMMIT_USER_NAME,
COMMIT_TIMESTAMP,
COMMIT_DESC) values (
);
#select total number
SELECT  (SELECT COUNT(*) FROM ISSUE) AS Issues,
        (SELECT COUNT(*) FROM EVENT) AS Events,
        (SELECT COUNT(*) FROM COMMENT) AS Comments,
        (SELECT COUNT(*) FROM MILESTONE) AS Milestones,
        (SELECT COUNT(*) FROM COMMIT) AS Commits FROM dual

#insert query for user
INSERT INTO USER (USER_ID, USER_NAME) Select distinct COMMIT_USER_ID, COMMIT_USER_NAME from COMMIT;

#select count of comments per group
select count(COMMENT_ID), COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join USER on COMMENT_USER_NAME = USER_NAME group by USER_GROUP_NUMBER, COMMENT_USER_NAME; 

#Long Open Issues (>15 days)
SELECT ISSUE_ID, TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )>15 order by USER_GROUP_NUMBER;

#Long Open Issues (>15 days)(Jan)
SELECT ISSUE_ID, TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )>15 and ISSUE_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

#Long Open Issues (>15 days)(Feb)
SELECT ISSUE_ID, TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )>15 and ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

#Long Open Issues (>15 days)(Mar)
SELECT ISSUE_ID, TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )>15 and ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

#Long Open Issues (>15 days)(Apr)
SELECT ISSUE_ID, TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(DAY,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )>15 and ISSUE_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;





#Short Open Issues (<30 mins)
SELECT ISSUE_ID, TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )<30 order by USER_GROUP_NUMBER;

#Short Open Issues (<30 mins)(Jan)
SELECT ISSUE_ID, TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )<30 and ISSUE_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

#Short Open Issues (<30 mins)(Feb)
SELECT ISSUE_ID, TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )<30 and ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

#Short Open Issues (<30 mins)(Mar)
SELECT ISSUE_ID, TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )<30 and ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

#Short Open Issues (<30 mins)(Apr)
SELECT ISSUE_ID, TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME ), USER_GROUP_NUMBER, USER_NAME from ISSUE join USER on ISSUE_USER_ID = USER_ID where TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME, ISSUE_CLOSE_TIME )<30 and ISSUE_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;





# Issues Missing Milestones
select 
    sum(case when ISSUE_MILESTONE_ID = "" then 1 else 0 end) Milestone_Missing,
        count(ISSUE_ID) total,
         USER_GROUP_NUMBER
from ISSUE join 
USER on USER_ID = ISSUE_USER_ID
group by  USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Issues Missing Milestones(Jan)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_MILESTONE_ID = "" and ISSUE_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

# Issues Missing Milestones(Feb)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join 
USER on USER_ID = ISSUE_USER_ID where ISSUE_MILESTONE_ID = "" and ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

# Issues Missing Milestones(Mar)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join 
USER on USER_ID = ISSUE_USER_ID where ISSUE_MILESTONE_ID = ""  and ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

# Issues Missing Milestones(Apr)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join 
USER on USER_ID = ISSUE_USER_ID where ISSUE_MILESTONE_ID = "" and ISSUE_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;



# Issues Missing Assignees
select 
    sum(case when ISSUE_ASSIGNEE_ID = "" then 1 else 0 end) Assignee_Missing,
        count(ISSUE_ID) total,
       USER_GROUP_NUMBER
from ISSUE join 
USER on USER_ID = ISSUE_USER_ID
group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Issues Missing Assignees(Jan)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_ASSIGNEE_ID = "" and ISSUE_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

# Issues Missing Assignees(Feb)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_ASSIGNEE_ID = "" and ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

# Issues Missing Assignees(Mar)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_ASSIGNEE_ID = "" and ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

# Issues Missing Assignees(Apr)
select ISSUE_ID, ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_ASSIGNEE_ID = "" and ISSUE_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;






#Issues vs Milestone Due Date
select ISSUE_ID,ISSUE_NUMBER, TIMESTAMPDIFF(DAY,MILESTONE_DUE_TIME,ISSUE_CLOSE_TIME), ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID join MILESTONE on MILESTONE_ID = ISSUE_MILESTONE_ID order by USER_GROUP_NUMBER;

#Issues vs Milestone Due Date(Jan)
select ISSUE_ID,ISSUE_NUMBER, TIMESTAMPDIFF(DAY,MILESTONE_DUE_TIME,ISSUE_CLOSE_TIME), ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID join MILESTONE on MILESTONE_ID = ISSUE_MILESTONE_ID where ISSUE_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

#Issues vs Milestone Due Date(Feb)
select ISSUE_ID,ISSUE_NUMBER, TIMESTAMPDIFF(DAY,MILESTONE_DUE_TIME,ISSUE_CLOSE_TIME), ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID join MILESTONE on MILESTONE_ID = ISSUE_MILESTONE_ID where ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

#Issues vs Milestone Due Date(Mar)
select ISSUE_ID,ISSUE_NUMBER, TIMESTAMPDIFF(DAY,MILESTONE_DUE_TIME,ISSUE_CLOSE_TIME), ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID join MILESTONE on MILESTONE_ID = ISSUE_MILESTONE_ID where ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

#Issues vs Milestone Due Date(Apr)
select ISSUE_ID,ISSUE_NUMBER, TIMESTAMPDIFF(DAY,MILESTONE_DUE_TIME,ISSUE_CLOSE_TIME), ISSUE_USER_NAME, USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID join MILESTONE on MILESTONE_ID = ISSUE_MILESTONE_ID where ISSUE_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;






#Equal number of Issue Assignees
select count(ISSUE_ID),ISSUE_ASSIGNEE_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID group by ISSUE_ASSIGNEE_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issue Assignees(Jan)
select count(ISSUE_ID),ISSUE_ASSIGNEE_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME <= '2016-2-1' group by ISSUE_ASSIGNEE_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issue Assignees(Feb)
select count(ISSUE_ID),ISSUE_ASSIGNEE_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' group by ISSUE_ASSIGNEE_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issue Assignees(Mar)
select count(ISSUE_ID),ISSUE_ASSIGNEE_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' group by ISSUE_ASSIGNEE_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issue Assignees(Apr)
select count(ISSUE_ID),ISSUE_ASSIGNEE_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-4-1' group by ISSUE_ASSIGNEE_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;




#Equal number of Issues posted by each user
select count(ISSUE_ID), ISSUE_USER_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID group by ISSUE_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issues posted by each user(Jan)
select count(ISSUE_ID), ISSUE_USER_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME <= '2016-2-1' group by ISSUE_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issues posted by each user(Feb)
select count(ISSUE_ID), ISSUE_USER_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' group by ISSUE_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issues posted by each user(Mar)
select count(ISSUE_ID), ISSUE_USER_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' group by ISSUE_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

#Equal number of Issues posted by each user(Apr)
select count(ISSUE_ID), ISSUE_USER_NAME,USER_GROUP_NUMBER from ISSUE join USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-4-1' group by ISSUE_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;




# Number of comments per issue
select AVG(ISSUE_COMMENTS), USER_GROUP_NUMBER from ISSUE join  USER on USER_ID = ISSUE_USER_ID group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per issue(Jan)
select AVG(ISSUE_COMMENTS), USER_GROUP_NUMBER from ISSUE join  USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME <= '2016-2-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per issue(Feb)
select AVG(ISSUE_COMMENTS), USER_GROUP_NUMBER from ISSUE join  USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-2-1' and ISSUE_CREATE_TIME <= '2016-3-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per issue(Mar)
select AVG(ISSUE_COMMENTS), USER_GROUP_NUMBER from ISSUE join  USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-3-1' and ISSUE_CREATE_TIME <= '2016-4-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per issue(Apr)
select AVG(ISSUE_COMMENTS), USER_GROUP_NUMBER from ISSUE join  USER on USER_ID = ISSUE_USER_ID where ISSUE_CREATE_TIME > '2016-4-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;


# Number of comments per user
select COUNT(COMMENT_ISSUE_URL),COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join  USER on USER_ID = COMMENT_USER_ID group by COMMENT_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per user(Jan)
select COUNT(COMMENT_ISSUE_URL),COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join  USER on USER_ID = COMMENT_USER_ID where COMMENT_CREATE_TIME <= '2016-2-1' group by COMMENT_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per user(Feb)
select COUNT(COMMENT_ISSUE_URL),COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join  USER on USER_ID = COMMENT_USER_ID where COMMENT_CREATE_TIME > '2016-2-1' and COMMENT_CREATE_TIME <= '2016-3-1' group by COMMENT_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per user(Mar)
select COUNT(COMMENT_ISSUE_URL),COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join  USER on USER_ID = COMMENT_USER_ID where COMMENT_CREATE_TIME > '2016-3-1' and COMMENT_CREATE_TIME <= '2016-4-1' group by COMMENT_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Number of comments per user(Apr)
select COUNT(COMMENT_ISSUE_URL),COMMENT_USER_NAME, USER_GROUP_NUMBER from COMMENT join  USER on USER_ID = COMMENT_USER_ID where COMMENT_CREATE_TIME > '2016-4-1' group by COMMENT_USER_NAME, USER_GROUP_NUMBER order by USER_GROUP_NUMBER;



# Time taken for fixing bugs
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "bug" order by USER_GROUP_NUMBER; 


# Time taken for fixing bugs(Jan)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "bug" and EVENT_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER; 

# Time taken for fixing bugs(Feb)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "bug" and EVENT_CREATE_TIME > '2016-2-1' and EVENT_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER; 

# Time taken for fixing bugs(Mar)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "bug" and EVENT_CREATE_TIME > '2016-3-1' and EVENT_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER; 

# Time taken for fixing bugs(Apr)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "bug" and EVENT_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER; 



# Time taken for creating enhancements
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "enhancemen" order by USER_GROUP_NUMBER;

# Time taken for creating enhancements(Jan)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "enhancemen" and EVENT_CREATE_TIME <= '2016-2-1' order by USER_GROUP_NUMBER;

# Time taken for creating enhancements(Feb)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "enhancemen" and EVENT_CREATE_TIME > '2016-2-1' and EVENT_CREATE_TIME <= '2016-3-1' order by USER_GROUP_NUMBER;

# Time taken for creating enhancements(Mar)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "enhancemen" and EVENT_CREATE_TIME > '2016-3-1' and EVENT_CREATE_TIME <= '2016-4-1' order by USER_GROUP_NUMBER;

# Time taken for creating enhancements(Apr)
select ISSUE_ID, USER_NAME,TIMESTAMPDIFF(MINUTE,ISSUE_CREATE_TIME,ISSUE_CLOSE_TIME),USER_GROUP_NUMBER from EVENT join  USER on USER_ID = EVENT_ACTOR_ID  join ISSUE on ISSUE_ID = EVENT_ISSUE_ID where EVENT_LABEL_NAME = "enhancemen" and EVENT_CREATE_TIME > '2016-4-1' order by USER_GROUP_NUMBER;





#select count of commits per group
select count(COMMIT_ID), COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME group by USER_GROUP_NUMBER, COMMIT_USER_NAME;

#select count of commits per group(Jan)
select count(COMMIT_ID), COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP <= '2016-2-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME;

#select count of commits per group(Feb)
select count(COMMIT_ID), COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-2-1' and COMMIT_TIMESTAMP <= '2016-3-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME;

#select count of commits per group(Mar)
select count(COMMIT_ID), COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-3-1' and COMMIT_TIMESTAMP <= '2016-4-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME;

#select count of commits per group(Apr)
select count(COMMIT_ID), COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-4-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME;






# Active number of days per repo
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Active number of days per repo(Jan)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP <= '2016-2-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Active number of days per repo(Feb)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-2-1' and COMMIT_TIMESTAMP <= '2016-3-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Active number of days per repo(Mar)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-3-1' and COMMIT_TIMESTAMP <= '2016-4-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;

# Active number of days per repo(Apr)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-4-1' group by USER_GROUP_NUMBER order by USER_GROUP_NUMBER;



# Active number of days per user
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME group by USER_GROUP_NUMBER, COMMIT_USER_NAME order by USER_GROUP_NUMBER;

# Active number of days per user(Jan)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP <= '2016-2-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME order by USER_GROUP_NUMBER;

# Active number of days per user(Feb)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-2-1' and COMMIT_TIMESTAMP <= '2016-3-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME order by USER_GROUP_NUMBER;

# Active number of days per user(Mar)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-3-1' and COMMIT_TIMESTAMP <= '2016-4-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME order by USER_GROUP_NUMBER;

# Active number of days per user(Apr)
select COUNT(DISTINCT(DATE(COMMIT_TIMESTAMP))) as DistinctDays, COMMIT_USER_NAME, USER_GROUP_NUMBER from COMMIT join USER on COMMIT_USER_NAME = USER_NAME where COMMIT_TIMESTAMP > '2016-4-1' group by USER_GROUP_NUMBER, COMMIT_USER_NAME order by USER_GROUP_NUMBER;




#output query result
#INTO OUTFILE './sqlo.csv' FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\n'